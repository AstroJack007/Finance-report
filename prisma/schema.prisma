generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @default(uuid())
  clerkUserId String        @unique
  email       String        @unique
  name        String
  imageUrl    String
  transaction Transaction[]
  account     Account[]
  budgets     Budget[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  type         AccountType
  balance      Decimal       @default(0)
  isDefault    Boolean       @default(false)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
  @@map("accounts")
}

enum AccountType {
  Savings
  Cuurent
}

model Transaction {
  id          String          @id @default(uuid())
  type        TransactionType
  amount      Decimal
  description String?
  date        DateTime
  category    String
  receiptUrl   String?
  isRecurring Boolean @default(false)
  reccurringInterval ReccurringInterval?
  nextReccuringDate DateTime?
  lastProccessedDate DateTime?
  status     TransactionStatus @default(COMPLETED)
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId String
  account   Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")

}

enum TransactionType {
  Income
  Expense
}
enum ReccurringInterval{
  daily
  weekly 
  monthly
  yearly
}
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Budget{
  id         String        @id @default(uuid())
  ammount     Decimal
  lastAlertAt DateTime?
  userId     String   
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  @@index([userId])
  @@map("budgets")
}
